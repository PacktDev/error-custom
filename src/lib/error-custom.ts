import debug from 'debug';
import joi from 'joi';
import v4 from 'uuid/v4';
import url from 'url';
import winston from 'winston';
import Elasticsearch from 'winston-elasticsearch';

/**
 * Error with enforced error Code and status Code and autogenerated error ID uuid.
 */
class ErrorCustom extends Error {
  public errorCode: number;

  public statusCode: number;

  public manuallyThrown: boolean;

  public id: string;

  public innerException: Error;

  public thrownMessage: string;

  /**
   * Error Constructor
   *
   * Calls parent constructor to set the error message and
   * adds code, errorCode, manuallyThrown and innerException custom properties.
   * Logs the final object using passed function or debug library.
   *
   * @constructor
   * @param {string} message
   * Error message to set on the Error object
   *
   * @param {number} statusCode
   * HTTP status code
   *
   * @param {number} errorCode
   * The specific error code as defined in documentation
   *
   * @param {Error} baseError
   * Optional base exception to be included as innerException property
   *
   * @param {string | Function} logFunction
   * Optional function to log the error with. If not supplied, debug library will be used
   * to log to the console with the tag `error-custom`
   */
  constructor(message: string, statusCode: number, errorCode: number,
    baseError?: Error, logFunction?: string | Function) {
    // Validation
    const messageValidation = joi.validate(message, joi.string().required());
    const statusCodeValidation = joi.validate(
      statusCode,
      joi.number().integer().min(200).max(600)
        .required(),
    );
    const errorCodeValidation = joi.validate(
      errorCode,
      joi.alternatives([joi.string(), joi.number().integer()]).required(),
    );
    const errors = [];
    if (messageValidation.error) errors.push('Invalid value for message parameter');
    if (statusCodeValidation.error) errors.push('Invalid value for statusCode parameter');
    if (errorCodeValidation.error) errors.push('Invalid value for errorCode parameter');

    // If multiple error are sent, throw as one instance.
    if (errors.length > 0) {
      throw new ErrorCustom(errors.join(', '), 500, 1000200, baseError);
    }

    // Re-enable the original chain for stack traces etc
    super(message);
    Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
    this.statusCode = statusCode;
    this.errorCode = errorCode;
    this.manuallyThrown = true;
    this.id = v4();
    this.thrownMessage = message;
    if (baseError instanceof Error) this.innerException = baseError;

    // Log to chosen location
    if (process.env.ELASITC_LOGGING_URL) {
      ErrorCustom.sendToElastic(process.env.ELASITC_URL, this.id, this);
    } else {
      switch (typeof logFunction) {
        case 'function':
          logFunction(this.id, this);
          break;
        case 'string':
          if (url.parse(logFunction).host) {
            ErrorCustom.sendToElastic(logFunction, this.id, this);
            break;
          } else {
            ErrorCustom.defaultOutput(this.id, this);
            break;
          }

        default:
          ErrorCustom.defaultOutput(this.id, this);
      }
    }
  }

  /**
   * The default logging behaviour for ErrorCustom
   * @param id
   * @param content
   */
  private static defaultOutput(id: string, ...content: any): void {
    return debug('error-custom')(id, content);
  }

  /**
   * Send the output to Elastic
   * @param node
   * @param id
   * @param content
   */
  private static async sendToElastic(node: string, id: string, ...content: any): Promise<void> {
    ErrorCustom.defaultOutput(id, content);

    const date = new Date();

    const logger = winston.createLogger({
      transports: [
        new Elasticsearch({
          level: 'error',
          index: process.env.ELASITC_LOGGING_INDEX || `logs-error-custom-${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`,
          clientOpts: {
            node,
          },
        }),
      ],
    });
    logger.log({
      level: 'error',
      message: content,
    });
  }
}

export default ErrorCustom;
