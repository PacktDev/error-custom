"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const joi_1 = __importDefault(require("joi"));
const v4_1 = __importDefault(require("uuid/v4"));
/**
 * Error with enforced error Code and status Code and autogenerated error ID uuid.
 */
class ErrorCustom extends Error {
    /**
     * Error Constructor
     *
     * Calls parent constructor to set the error message and
     * adds code, errorCode, manuallyThrown and innerException custom properties.
     * Logs the final object using passed function or debug library.
     *
     * @constructor
     * @param {string} message
     * Error message to set on the Error object
     *
     * @param {number} statusCode
     * HTTP status code
     *
     * @param {number} errorCode
     * The specific error code as defined in documentation
     *
     * @param {Error} baseError
     * Optional base exception to be included as innerException property
     *
     * @param {Function} logFunction
     * Optional function to log the error with. If not supplied, debug library will be used
     * to log to the console with the tag `error-custom`
     */
    constructor(message, statusCode, errorCode, baseError, logFunction) {
        const messageValidation = joi_1.default.validate(message, joi_1.default.string().required());
        const statusCodeValidation = joi_1.default.validate(statusCode, joi_1.default.number().integer().min(200).max(600)
            .required());
        const errorCodeValidation = joi_1.default.validate(errorCode, joi_1.default.alternatives([joi_1.default.string(), joi_1.default.number().integer()]).required());
        const errors = [];
        if (messageValidation.error)
            errors.push('Invalid value for message parameter');
        if (statusCodeValidation.error)
            errors.push('Invalid value for statusCode parameter');
        if (errorCodeValidation.error)
            errors.push('Invalid value for errorCode parameter');
        if (errors.length > 0) {
            throw new ErrorCustom(errors.join(', '), 500, 1000200, baseError);
        }
        super(message);
        this.statusCode = statusCode;
        this.errorCode = errorCode;
        this.manuallyThrown = true;
        this.id = v4_1.default();
        if (baseError instanceof Error)
            this.innerException = baseError;
        let writeOut;
        if (logFunction) {
            writeOut = logFunction;
        }
        else {
            const logger = debug_1.default('error-custom');
            writeOut = logger;
        }
        writeOut(this.id, this);
    }
}
exports.default = ErrorCustom;
